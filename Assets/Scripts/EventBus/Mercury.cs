using UnityEngine;
using UnityEngine.Events;
using System;
using System.Collections.Generic;

namespace EventBus
{
    public enum EMercuryEvent
    {
        E_ME_OBJ_DELIVER = 1,
        E_ME_USER_EVENT = 1000,
    }

    // opcode for MEObjDeliver
    public enum EObjDeliverOPCode
    {        
        E_OP_LACK_TurnS = 1, // generated by TurnWindow
        E_OP_HANDLE_TurnPACK = 2,
        E_OP_PROCESS_TurnPACK = 3,
        E_OP_UPDATE_GAME_LOGIC = 4,
        E_OP_LOADING_PROGRESS = 5,
        E_OP_RECONNECTION_PROGRESS = 6,
        E_OP_OB_FASTFORWARD_PROGRESS = 15,
        E_OP_UPDATE_TAILS_OF_GAME_LOGIC = 7,
		E_OP_START_RECONNECTION = 17,
		E_OP_END_RECONNECTION = 18,
        E_OP_PROCESS_TurnDROP = 20,
        E_OP_FETCH_RECONNECTION_TurnS = 21,
        E_OP_ON_EMPTY_SCENE_LOADED = 22,
        E_OP_NOTIFY_GAMESTART_CTX = 23,
        E_OP_OB_PLAY_STATE = 24,

        // connector 网络底层抛出的事件
        E_OP_CONN_CONNECTING = 9,
        E_OP_CONN_CONNECTED = 10,
        E_OP_CONN_CLOSING = 11,
        E_OP_CONN_CLOSED = 12,
        E_OP_CONN_ERROR = 13,
        E_OP_CONN_CLOSE_BY_REMOTE = 14,

        // Network message failure
        E_OP_NETMSG_SYSERROR = 15,
        E_OP_NETMSG_GAMEERROR = 25,
    }

    public class MercuryEventBase : AbstractSmartObj
    {
        protected int _eventId = 0;

        public int eventId
        {
            get
            {
                return _eventId;
            }
            set
            {
                _eventId = value;
            }
        }

        public MercuryEventBase() { }
        public MercuryEventBase(int evtId)
        {
            _eventId = evtId;
        }

        public override void OnRelease() { }
    }

    public class MEObjDeliver : MercuryEventBase
    {
        private const int kArgumentCount = 3;

        private object[] _args = new object[kArgumentCount];
        public object[] args
        {
            get
            {
                return _args;
            }
        }
        
        public object obj
        {
            get
            {
                return (object)_args;
            }            
        }

        private int _opcode = 0;
        public int opcode
        {
            get
            {
                return _opcode;
            }
            set
            {
                _opcode = value;
            }
        }

        public MEObjDeliver()            
        {
            _eventId = (int)EMercuryEvent.E_ME_OBJ_DELIVER;
        }

        public override void Reset()
        {
            base.Reset();
            for (int ii = 0; ii < kArgumentCount; ++ii)
                _args[ii] = null;
        }

        public override void OnRelease()
        {
            Reset();
        }
    }

    public class Mercury : Singleton<Mercury>
    {      
        public delegate void MecruryEventCallback(object sender, MercuryEventBase e);

        // implement unity event
        private class Session : AbstractSmartObj
        {
            private int _sessionId = -1;
            public int sessionId
            {
                get
                {
                    return _sessionId;
                }
            }

            public Session()
            {
                _sessionId = System.Guid.NewGuid().GetHashCode();
            }

            private event MecruryEventCallback evts;

            public void AddListener(MecruryEventCallback cb)
            {
                evts += cb;
            }

            public void RemoveListener(MecruryEventCallback cb)
            {
                evts -= cb;
            }

            public void RemoveAllListeners()
            {
                if (evts != null)
                {
                    Delegate[] cbs = evts.GetInvocationList();
                    for (int ii = 0; ii < cbs.Length; ++ii)
                    {
                        evts -= (MecruryEventCallback)cbs[ii];
                    }
                }
            }

            public void Invoke(object sender, MercuryEventBase e)
            {
                if (evts != null)
                    evts(sender, e);
            }

            public override void OnRelease()
            {
                RemoveAllListeners();
            }
        }

        // handle sessions        
        private Dictionary<int, Session> _sessionSlots = new Dictionary<int, Session>();        
        private Session _recentSession = null;

        public int AccquireSession()
        {
            Session session = ObjectCachePool.instance.Fetch<Session>(16);
            _sessionSlots.Add(session.sessionId, session);
            return session.sessionId;         
        }

        public void ReleaseSession(int token)
        {
            if (_recentSession != null && _recentSession.sessionId == token)
            {
                _recentSession.Release();
                _recentSession = null;
                 _sessionSlots.Remove(token);
            }
            else
            {
                if (_sessionSlots.ContainsKey(token))
                {
                    _sessionSlots[token].Release();
                    _sessionSlots.Remove(token);
                }
            }           
        }

        public void AddListener(int token, MecruryEventCallback cb)
        {
            if (cb != null)
            {
                if (_recentSession != null && _recentSession.sessionId == token)
                {
                    _recentSession.AddListener(cb);
                }
                else
                {                    
                    _recentSession = _sessionSlots[token];
                    _recentSession.AddListener(cb);
                }
            }
        }

        public void RemoveListener(int token, MecruryEventCallback cb)
        {
            if (cb != null)
            {
                if (_recentSession != null && _recentSession.sessionId == token)
                {
                    _recentSession.RemoveListener(cb);
                }
                else
                {
                    _recentSession = _sessionSlots[token];
                    _recentSession.RemoveListener(cb);
                }
            }
        }

        public void RemoveAllListeners(int token)
        {
            if (_recentSession != null && _recentSession.sessionId == token)
            {
                _recentSession.RemoveAllListeners();
            }
            else
            {
                _recentSession = _sessionSlots[token];
                _recentSession.RemoveAllListeners();
            }
        }

        public void Broadcast(int token, object sender, MercuryEventBase e)
        {
            if (_recentSession == null || _recentSession.sessionId != token)
            {
                _recentSession = _sessionSlots[token];
                if (_recentSession != null)
                {
                    _recentSession.Invoke(sender, e);
                }
            }
            else
            {
                _recentSession.Invoke(sender, e);
            }

            e.Release();
        }

        public override void UnInit()
        {
            foreach(KeyValuePair<int, Session> kv in _sessionSlots)
            {
                kv.Value.RemoveAllListeners();
            }

            _recentSession = null;
        } 
    }
}